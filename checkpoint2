{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "883c3da7",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-ec294bf2df86>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ecf8d224",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saisir votre liste123\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "#QUESTION 1\n",
    "L=list(input(\"saisir votre liste\"))\n",
    "product=1\n",
    "for item in (L):\n",
    "    product=product*int(item)\n",
    "print (product)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e367d527",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1', '2', '3']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a10cce2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saisir les tuples de la liste(1,2)\n"
     ]
    }
   ],
   "source": [
    "#QUESTION2\n",
    "tuples=input(\"saisir les tuples de la liste\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8e4e8957",
   "metadata": {},
   "outputs": [],
   "source": [
    "L=[]\n",
    "for i in range(2):\n",
    "    L.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2ec8e073",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9f8404ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 1]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2ca2bf94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saisir la taille de la liste3\n",
      "saisir un  chiffre: 1\n",
      "saisir un  chiffre: 2\n",
      "saisir un  chiffre: 2\n",
      "saisir un  chiffre: 5\n",
      "saisir un  chiffre: 4\n",
      "saisir un  chiffre: 4\n"
     ]
    }
   ],
   "source": [
    "#QUESTION2\n",
    "n=int(input(\"saisir la taille de la liste\"))\n",
    "L=[]\n",
    "for i in range(n):\n",
    "    l=[] \n",
    "    for j in range(2):\n",
    "        l.append(int(input(\"saisir un  chiffre: \")))\n",
    "    L.append(tuple(l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "099c05f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(1, 2), (4, 4), (4, 4)]\n"
     ]
    }
   ],
   "source": [
    "def sortliste(L):\n",
    "    st=len(L)\n",
    "    X=0\n",
    "    for i in range(0,st):\n",
    "        for j in range(0,st-1):\n",
    "            if(L[j][1]>L[j+1][1]):\n",
    "               x=L[j]\n",
    "               L[j]=L[j+1]\n",
    "               L[j+1]=X\n",
    "    return (L)\n",
    "print(sortliste(L))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6e3082e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': {400}, 'b': {400}}\n"
     ]
    }
   ],
   "source": [
    "#question3\n",
    "d1= {'a': 100, 'b': 200, 'c':300}\n",
    "d2= {'a': 300, 'b': 200, 'd':400}\n",
    "d3= {}\n",
    "for i,x in d1.items():\n",
    "    for j,y in d2.items():\n",
    "        if i==j:\n",
    "            d3[i]={x+y}\n",
    "        else:\n",
    "                         \n",
    "print(d3)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "36366d88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "donner un entier N:8\n",
      "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}\n"
     ]
    }
   ],
   "source": [
    "#question4\n",
    "D={}\n",
    "N=int(input(\"donner un entier N:\"))\n",
    "keys=range(N)\n",
    "for i in range(1,N+1):\n",
    "    D[i]=i*i\n",
    "print(D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a9eb91d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saisir la taille de la liste3\n",
      "saisir un  chiffre: item\n",
      "saisir un  chiffre: 12.20\n",
      "saisir un  chiffre: item1\n",
      "saisir un  chiffre: 15.10\n",
      "saisir un  chiffre: item2\n",
      "saisir un  chiffre: 24.5\n"
     ]
    }
   ],
   "source": [
    "#QUESTION5\n",
    "n=int(input(\"saisir la taille de la liste\"))\n",
    "L=[]\n",
    "for i in range(n):\n",
    "    l=[] \n",
    "    for j in range(2):\n",
    "        l.append(input(\"saisir un  chiffre: \"))\n",
    "    L.append(tuple(l))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "0efec633",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('item2', '24.5'), ('item1', '15.10'), ('item', '12.20')]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "552915b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('item2', '24.5'), ('item1', '15.10'), ('item', '12.20')]\n"
     ]
    }
   ],
   "source": [
    "#Question5\n",
    "#tup=list(input(\"saisir votre liste\"))\n",
    "\n",
    "def Sort_Tuple(tup):\n",
    "    lst = len(tup)\n",
    "    for i in range(0,lst):\n",
    "        for j in range(0,lst-1):\n",
    "            if(tup[j][1]<tup[j + 1][1]):\n",
    "                temp = tup[j]\n",
    "                tup[j]= tup[j + 1]\n",
    "                tup[j + 1]= temp\n",
    "    return tup\n",
    "print(Sort_Tuple(L))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e78b95b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
